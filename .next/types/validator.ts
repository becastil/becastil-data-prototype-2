// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../app/auth/auth-code-error/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth/auth-code-error">> = Specific
  const handler = {} as typeof import("../../app/auth/auth-code-error/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/auth/login/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth/login">> = Specific
  const handler = {} as typeof import("../../app/auth/login/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/auth/signup/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth/signup">> = Specific
  const handler = {} as typeof import("../../app/auth/signup/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/charts/test/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/charts/test">> = Specific
  const handler = {} as typeof import("../../app/charts/test/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard">> = Specific
  const handler = {} as typeof import("../../app/dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboards/healthcare-costs/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboards/healthcare-costs">> = Specific
  const handler = {} as typeof import("../../app/dashboards/healthcare-costs/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/hcc/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/hcc">> = Specific
  const handler = {} as typeof import("../../app/hcc/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/help/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/help">> = Specific
  const handler = {} as typeof import("../../app/help/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/insights/data-dashboards-for-business-success/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/insights/data-dashboards-for-business-success">> = Specific
  const handler = {} as typeof import("../../app/insights/data-dashboards-for-business-success/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/privacy/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/privacy">> = Specific
  const handler = {} as typeof import("../../app/privacy/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/reports/claims-analysis/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/reports/claims-analysis">> = Specific
  const handler = {} as typeof import("../../app/reports/claims-analysis/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/reports/dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/reports/dashboard">> = Specific
  const handler = {} as typeof import("../../app/reports/dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/reports/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/reports">> = Specific
  const handler = {} as typeof import("../../app/reports/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/security/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/security">> = Specific
  const handler = {} as typeof import("../../app/security/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/terms/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/terms">> = Specific
  const handler = {} as typeof import("../../app/terms/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/tools/csv-visualizer/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/tools/csv-visualizer">> = Specific
  const handler = {} as typeof import("../../app/tools/csv-visualizer/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/upload/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/upload">> = Specific
  const handler = {} as typeof import("../../app/upload/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/charts/render/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/charts/render">> = Specific
  const handler = {} as typeof import("../../app/api/charts/render/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/claims/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/claims">> = Specific
  const handler = {} as typeof import("../../app/api/claims/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/configurations/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/configurations">> = Specific
  const handler = {} as typeof import("../../app/api/configurations/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/dashboard/stats/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/dashboard/stats">> = Specific
  const handler = {} as typeof import("../../app/api/dashboard/stats/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/hcc/template/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/hcc/template">> = Specific
  const handler = {} as typeof import("../../app/api/hcc/template/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/hcc/upload/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/hcc/upload">> = Specific
  const handler = {} as typeof import("../../app/api/hcc/upload/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/process/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/process">> = Specific
  const handler = {} as typeof import("../../app/api/process/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/reports/pdf/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/reports/pdf">> = Specific
  const handler = {} as typeof import("../../app/api/reports/pdf/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/sessions/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/sessions">> = Specific
  const handler = {} as typeof import("../../app/api/sessions/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/upload/progress/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/upload/progress">> = Specific
  const handler = {} as typeof import("../../app/api/upload/progress/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/upload/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/upload">> = Specific
  const handler = {} as typeof import("../../app/api/upload/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/auth/callback/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/auth/callback">> = Specific
  const handler = {} as typeof import("../../app/auth/callback/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../app/dashboard/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/dashboard">> = Specific
  const handler = {} as typeof import("../../app/dashboard/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
